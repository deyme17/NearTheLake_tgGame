from bot.controller import end_game
from config.settings import MAX_PLAYERS, GAME_DURATION_MONTHS, SCORE_PENALTY, SCORE_REWARD_CLEAN, MEETING_DURATION, MEETING_INTERVAL, ACTION_1_CLEAR_VAL, ACTION_2_CLEAR_VAL
from game.lake import Lake
from game.events import spring_flood, start_meeting
from bot.utils import prompt_action



class Game:
    def __init__(self):
        self.players = {}  # {user_id: {"name": player_name, "score": 0, "current_action": None}}
        self.max_players = MAX_PLAYERS
        self.state = "waiting"  # waiting, in_progress, ended
        self.turn = 0
        self.lake = Lake()
        self.admin_chat_id = None

        self.meeting_active = False
        self.meeting_end_votes = set()  # –ì—Ä–∞–≤—Ü—ñ, —è–∫—ñ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –Ω–∞—Ä–∞–¥—É"

        self.decision_1_scores = [5, 19, 26, 33, 41, 51, 64, 80, 100, 110, 121, 133, 146, 161, 177]
        self.decision_2_scores = [-20, -8, -3, 3, 7, 14, 21, 28, 35, 48, 63, 79, 92, 111, 127]

        self.total_points = 0  
        self.turn_points = 0 


# !!!!!!!!!!!
    async def process_turn(self, context):
        """–û–±—Ä–æ–±–∫–∞ —Ö–æ–¥—É –≥—Ä–∏."""
        if self.meeting_active:
            return

        if not self.all_actions_collected():
            return

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –±–∞–ª—ñ–≤
        previous_quality = (self.lake.level, self.lake.position)
        initial_scores = self.lake.get_current_scores()  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –¥–æ –∑–º—ñ–Ω

        has_penalty = any(player["current_action"] == "3" for player in self.players.values())

        # –°–∫–∏–¥–∞–Ω–Ω—è –æ—á–æ–∫ –∑–∞ —Ö—ñ–¥
        self.turn_points = 0

        # –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤
        for user_id, player_data in self.players.items():
            action = player_data["current_action"]
            earned_points = 0  # –û—á–∫–∏ –≥—Ä–∞–≤—Ü—è –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥

            if action == "1":
                self.lake.update_quality(ACTION_1_CLEAR_VAL)
                if has_penalty:
                    self.apply_penalty(player_data, initial_scores[0])  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –±–∞–ª–∏
                else:
                    earned_points = initial_scores[0]
                    player_data["score"] += earned_points
            elif action == "2":
                self.lake.update_quality(ACTION_2_CLEAR_VAL)
                earned_points = initial_scores[1]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –±–∞–ª–∏
                player_data["score"] += earned_points
            elif action == "3":
                for target_id, target_data in self.players.items():
                    if target_data["current_action"] == "1":
                        self.apply_penalty(target_data, initial_scores[0])  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –±–∞–ª–∏
                earned_points = -len(self.players)
                player_data["score"] += earned_points
            elif action == "4":
                for target_id, target_data in self.players.items():
                    if target_data["current_action"] == "2":
                        self.apply_reward(target_data)
                earned_points = -len(self.players)
                player_data["score"] += earned_points

            self.turn_points += earned_points  # –î–æ–¥–∞—î–º–æ –æ—á–∫–∏ –≥—Ä–∞–≤—Ü—è –¥–æ –æ—á–æ–∫ —Ö–æ–¥—É
            player_data["current_action"] = None

        self.total_points += self.turn_points  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É–º–∞—Ä–Ω—ñ –æ—á–∫–∏

        # –§–æ—Ä–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–∑–µ—Ä–∞ —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        lake_status_message = self.get_turn_info(previous_quality, initial_scores[0], initial_scores[1])

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        for user_id in self.players.keys():
            await context.bot.send_message(chat_id=user_id, text=lake_status_message)

        self.turn += 1
        if self.check_game_end():
            winners_message = self.get_winner()
            for user_id in self.players.keys():
                await context.bot.send_message(chat_id=user_id, text="üèÅ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await context.bot.send_message(chat_id=user_id, text=winners_message)
            self.reset_game()
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–≤–æ–¥–∫–∏
        if self.turn % 12 == 0:
            flood_message = spring_flood(self.lake, self.turn)
            if flood_message:
                for user_id in self.players.keys():
                    await context.bot.send_message(chat_id=user_id, text=flood_message)

        # –ó–∞–ø—É—Å–∫ –Ω–∞—Ä–∞–¥–∏
        if self.turn % MEETING_INTERVAL == 0:
            await start_meeting(context, self)
            return

        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –¥—ñ—ó –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É
        for user_id in self.players.keys():
            await prompt_action(context, user_id)



    def add_player(self, user_id, name):
        """Adds a player to the game."""
        if len(self.players) < self.max_players and user_id not in self.players:
            self.players[user_id] = {"name": name, "score": 0, "current_action": None}

            # Assign the first player as admin
            if self.admin_chat_id is None:
                self.admin_chat_id = user_id

            return True, len(self.players)
        return False, len(self.players)


    def apply_penalty(self, player_data, score_1):
        player_data["score"] -= SCORE_PENALTY
        player_data["score"] -= score_1

    def apply_reward(self, player_data):
        player_data["score"] += SCORE_REWARD_CLEAN


    def all_actions_collected(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–∫–æ–Ω–∞–ª–∏ —Å–≤–æ—ó –¥—ñ—ó."""
        return all(
            player_data["current_action"] is not None 
            for player_data in self.players.values()
        )


    def get_turn_info(self, previous_quality, score_1, score_2):
        """
        –§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ—Å–ª—è —Ö–æ–¥—É.
        """
        previous_level, previous_position = previous_quality
        current_level, current_position = self.lake.level, self.lake.position

        water_status = (
            "–ß–∏—Å—Ç–∞ –≤–æ–¥–∞" if current_level >= 4 else
            "–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ —á–∏—Å—Ç–∞ –≤–æ–¥–∞" if -3 <= current_level <= 3 else
            "–ë—Ä—É–¥–Ω–∞ –≤–æ–¥–∞"
        )

        result = (
            f"‚≠êÔ∏è–û—Ç—Ä–∏–º–∞–Ω–æ –±–∞–ª—ñ–≤ –∑–∞ —Ö—ñ–¥: {self.turn_points}\n"
            f"üåü–°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {self.total_points}\n"
            f"----------------------------------------------------------\n"
            f"üåä –°—Ç–∞–Ω –æ–∑–µ—Ä–∞: {water_status}\n"
            f"üîÑ –ó–º—ñ–Ω–∞ —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏: –†—ñ–≤–µ–Ω—å {previous_level} -> {current_level}, "
            f"–ü–æ–∑–∏—Ü—ñ—è {previous_position} -> {current_position}\n"
            f"----------------------------------------------------------\n"
            f"üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥: {self.turn}/{GAME_DURATION_MONTHS}\n"
            f"üìä –ë–∞–ª–∏ –∑–∞ —Ä—ñ—à–µ–Ω–Ω—è:\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ1 (—Å–∫–∏–¥–∞–Ω–Ω—è): {score_1}\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ2 (–æ—á–∏—â–µ–Ω–Ω—è): {score_2}\n"
        )
        return result

    
    def calculate_action_scores(self):
        """–û–±—á–∏—Å–ª—é—î –±–∞–ª–∏ –¥–ª—è –¥—ñ–π ‚Ññ1 —Ç–∞ ‚Ññ2 –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É –æ–∑–µ—Ä–∞."""
        current_quality = self.lake.water_quality
        row_index = max(-8, min(current_quality, 6)) + 8  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —ñ–Ω–¥–µ–∫—Å –≤—ñ–¥ 0 –¥–æ 14
        score_1 = self.decision_1_scores[row_index]
        score_2 = self.decision_2_scores[row_index]
        return score_1, score_2


    def check_game_end(self):
        if self.turn >= GAME_DURATION_MONTHS:
            self.state = "ended"
            return True
        return False

    def get_winner(self):
        if self.state != "ended":
            return "–ì—Ä–∞ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        sorted_players = sorted(
            self.players.items(),
            key=lambda item: item[1]["score"],
            reverse=True
        )

        table = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏:\n"
        table += "{:<4} {:<20} {:<10}\n".format("–ú—ñ—Å—Ü–µ", "–ì—Ä–∞–≤–µ—Ü—å", "–û—á–∫–∏")
        table += "-" * 40 + "\n"

        for rank, (user_id, player_data) in enumerate(sorted_players, start=1):
            table += "{:<4} {:<20} {:<10}\n".format(
                rank,
                player_data["name"],
                player_data["score"]
            )

        return table
    
    
    def reset_game(self):
        """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω –≥—Ä–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó."""
        self.players = {}
        self.state = "waiting"  # –°—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω –≥—Ä–∏ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        self.turn = 0
        self.total_points = 0
        self.lake.reset_lake()  # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞
        self.meeting_active = False
        self.meeting_end_votes.clear()
