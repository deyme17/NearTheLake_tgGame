from bot.controller import end_game
from config.settings import MAX_PLAYERS, GAME_DURATION_MONTHS, SCORE_PENALTY, SCORE_REWARD, MEETING_DURATION, MEETING_INTERVAL, ACTION_1_CLEAR_VAL, ACTION_2_CLEAR_VAL
from game.lake import Lake
from game.player import Player
from game.events import spring_flood, start_meeting
from bot.utils import prompt_action


class Game:
    def __init__(self):
        self.players = {}  # {user_id: Player}
        self.max_players = MAX_PLAYERS
        self.state = "waiting"
        self.turn = 1
        self.lake = Lake()
        self.admin_chat_id = None

        self.meeting_active = False
        self.meeting_end_votes = set()

        self.total_points = 0
        self.turn_points = 0


    def add_player(self, user_id, name):
        """–î–æ–¥–∞—î –≥—Ä–∞–≤—Ü—è –¥–æ –≥—Ä–∏"""
        if len(self.players) < self.max_players and user_id not in self.players:
            player = Player(user_id, name)
            self.players[user_id] = player
            
            if self.admin_chat_id is None:
                self.admin_chat_id = user_id
                
            return True, len(self.players)
        return False, len(self.players)
    
    
# the main fuction
    async def process_turn(self, context):
        """–û–±—Ä–æ–±–∫–∞ —Ö–æ–¥—É –≥—Ä–∏"""
        if self.meeting_active or not self.all_actions_collected():
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞
        previous_quality = (self.lake.level, self.lake.position)
        initial_scores = self.lake.get_current_scores()

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —à—Ç—Ä–∞—Ñ—ñ–≤ –∞–±–æ –Ω–∞–≥–æ—Ä–æ–¥
        has_penalty = any(player.current_action == "3" for player in self.players.values())
        has_reward = any(player.current_action == "4" for player in self.players.values())

        for player in self.players.values():
            action = player.current_action 

            if action == "1": #  –°–∫–∏–¥–∞–Ω–Ω—è
                self.lake.update_quality(ACTION_1_CLEAR_VAL)
                if not has_penalty:
                    player.add_points(initial_scores[0])
                else:
                    self.apply_penalty(player)

            elif action == "2": # –û—á–∏—â–µ–Ω–Ω—è
                self.lake.update_quality(ACTION_2_CLEAR_VAL)
                player.add_points(initial_scores[1])
                if has_reward:
                    player.add_points(SCORE_REWARD)

            elif action == "3":  # –®—Ç—Ä–∞—Ñ
                earned_points = -len(self.players)
                player.add_points(earned_points)

            elif action == "4":  # –ù–∞–≥–æ—Ä–æ–¥–∞
                earned_points = -len(self.players)
                player.add_points(earned_points)

            # –û–Ω–æ–≤–ª—é—î–º–æ –æ—á–∫–∏ –≥—Ä–∞–≤—Ü—è –∑–∞ —Ö—ñ–¥
            player.clear_action()

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞
        next_scores = self.lake.get_current_scores()
        turn_info = self.get_turn_info(previous_quality, next_scores[0], next_scores[1])

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∞–≤—Ü—è–º
        for player in self.players.values():
            personal_message = (
                f"‚≠êÔ∏è –í–∞—à—ñ –æ—á–∫–∏ –∑–∞ —Ü–µ–π —Ö—ñ–¥: {player.current_turn_points}\n"
                f"üåü –í–∞—à—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ—á–∫–∏: {player.score}\n"
                f"{turn_info}"
            )
            await context.bot.send_message(chat_id=player.player_id, text=personal_message)

            # –æ—á–∏—â–∞—î–º–æ current_turn_points
            player.clear_curr_turn_points()


        # –û–Ω–æ–≤–ª—é—î–º–æ —Ö—ñ–¥ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        self.turn += 1
        if self.check_game_end():
            winners_message = self.get_winner()
            for player in self.players.values():
                await context.bot.send_message(chat_id=player.player_id, text="üèÅ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await context.bot.send_message(chat_id=player.player_id, text=winners_message)
            self.reset_game()
            return

        # –ü–æ–¥—ñ—ó (–ø–æ–≤—ñ–Ω—å, –∑—É—Å—Ç—Ä—ñ—á—ñ —Ç–æ—â–æ)
        if self.turn % 12 == 0:
            flood_message = spring_flood(self.lake)
            if flood_message:
                for player in self.players.values():
                    await context.bot.send_message(chat_id=player.player_id, text=flood_message)

        if self.turn % MEETING_INTERVAL == 0:
            await start_meeting(context, self)
            return

        # –ó–∞–ø–∏—Ç—É—î–º–æ –¥—ñ—ó –≤—ñ–¥ –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥
        for player in self.players.values():
            await prompt_action(context, player.player_id)


    def apply_penalty(self, player):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —à—Ç—Ä–∞—Ñ –¥–æ –≥—Ä–∞–≤—Ü—è"""
        player.add_points(-SCORE_PENALTY)

    def apply_reward(self, player):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –Ω–∞–≥–æ—Ä–æ–¥—É –¥–æ –≥—Ä–∞–≤—Ü—è"""
        player.add_points(SCORE_REWARD)


    def all_actions_collected(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–∫–æ–Ω–∞–ª–∏ —Å–≤–æ—ó –¥—ñ—ó"""
        return all(player.current_action is not None for player in self.players.values())
    

    def get_turn_info(self, previous_quality, score_1, score_2):
        """
        –§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ—Å–ª—è —Ö–æ–¥—É.
        """
        previous_level, previous_position = previous_quality
        current_level, current_position = self.lake.level, self.lake.position

        water_status = (
            "–ß–∏—Å—Ç–∞ –≤–æ–¥–∞" if current_level >= 4 else
            "–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ —á–∏—Å—Ç–∞ –≤–æ–¥–∞" if -3 <= current_level <= 3 else
            "–ë—Ä—É–¥–Ω–∞ –≤–æ–¥–∞"
        )

        result = (
            f"----------------------------------------------------------\n"
            f"üåä –°—Ç–∞–Ω –æ–∑–µ—Ä–∞: {water_status}\n"
            f"üîÑ –ó–º—ñ–Ω–∞ —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏: –†—ñ–≤–µ–Ω—å {previous_level} -> {current_level}, "
            f"–ü–æ–∑–∏—Ü—ñ—è {previous_position} -> {current_position}\n"
            f"----------------------------------------------------------\n"
            f"üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥: {self.turn}/{GAME_DURATION_MONTHS}\n"
            f"üìä –ë–∞–ª–∏ –∑–∞ —Ä—ñ—à–µ–Ω–Ω—è:\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ1 (—Å–∫–∏–¥–∞–Ω–Ω—è): {score_1}\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ2 (–æ—á–∏—â–µ–Ω–Ω—è): {score_2}\n"
        )
        return result
    

    def check_game_end(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è –≥—Ä–∏"""
        if self.turn >= GAME_DURATION_MONTHS:
            self.state = "ended"
            return True
        return False

    def get_winner(self):
        """–í–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—è –≥—Ä–∏"""
        if self.state != "ended":
            return "–ì—Ä–∞ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        sorted_players = sorted(
            self.players.values(),
            key=lambda player: player.score,
            reverse=True
        )

        table = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏:\n"
        table += "{:<4} {:<20} {:<10}\n".format("–ú—ñ—Å—Ü–µ", "–ì—Ä–∞–≤–µ—Ü—å", "–û—á–∫–∏")
        table += "-" * 40 + "\n"

        for rank, player in enumerate(sorted_players, start=1):
            table += "{:<4} {:<20} {:<10}\n".format(
                rank,
                player.name,
                player.score
            )

        return table
    

    def reset_game(self):
        """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω –≥—Ä–∏"""
        for player in self.players.values():
            player.reset()
        self.players.clear()
        self.state = "waiting"
        self.turn = 0
        self.total_points = 0
        self.lake.reset_lake()
        self.meeting_active = False
        self.meeting_end_votes.clear()