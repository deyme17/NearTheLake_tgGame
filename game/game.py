from config.settings import MAX_PLAYERS, GAME_DURATION_MONTHS, SCORE_PENALTY, SCORE_REWARD_CLEAN, MEETING_DURATION, MEETING_INTERVAL, ACTION_1_CLEAR_VAL, ACTION_2_CLEAR_VAL
from game.lake import Lake
from game.events import spring_flood
from bot.utils import prompt_action



class Game:
    def __init__(self):
        self.players = {}  # {user_id: {"name": player_name, "score": 0, "current_action": None}}
        self.max_players = MAX_PLAYERS
        self.state = "waiting"  # waiting, in_progress, ended
        self.turn = 0
        self.lake = Lake()
        self.is_meeting_active = False  # –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞—Ä–∞–¥–∞

        self.decision_1_scores = [5, 19, 26, 33, 41, 51, 64, 80, 100, 110, 121, 133, 146, 161, 177]
        self.decision_2_scores = [-20, -8, -3, 3, 7, 14, 21, 28, 35, 48, 63, 79, 92, 111, 127]


    def add_player(self, user_id, name):
        """–î–æ–¥–∞—î –≥—Ä–∞–≤—Ü—è –¥–æ –≥—Ä–∏."""
        if len(self.players) < self.max_players and user_id not in self.players:
            self.players[user_id] = {"name": name, "score": 0, "current_action": None}
            return True, len(self.players)
        return False, len(self.players)

    
    async def start_game(self, context):
        """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è–º."""
        self.state = "in_progress"
        player_list = "\n".join([f"- {data['name']}" for data in self.players.values()])
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∏ –¥–ª—è –¥—ñ–π
        score_1, score_2 = self.calculate_action_scores()

        start_message = (
            f"üéÆ –ì—Ä–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è! –£—á–∞—Å–Ω–∏–∫–∏:\n{player_list}\n\n"
            f"–ù–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏:\n"
            f"- –†—ñ—à–µ–Ω–Ω—è ‚Ññ1 (–°–∫–∏–¥–∞–Ω–Ω—è): {score_1} –æ—á–æ–∫\n"
            f"- –†—ñ—à–µ–Ω–Ω—è ‚Ññ2 (–û—á–∏—â–µ–Ω–Ω—è): {score_2} –æ—á–æ–∫\n"
            f"- –†—ñ—à–µ–Ω–Ω—è ‚Ññ3 (–®—Ç—Ä–∞—Ñ): -{SCORE_PENALTY} –æ—á–æ–∫\n"
            f"- –†—ñ—à–µ–Ω–Ω—è ‚Ññ4 (–ü—Ä–µ–º—ñ—è): +{SCORE_REWARD_CLEAN} –æ—á–æ–∫\n\n"
            f"–í–∞—à –ø–µ—Ä—à–∏–π —Ö—ñ–¥. –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é (1: –°–∫–∏–¥–∞–Ω–Ω—è, 2: –û—á–∏—â–µ–Ω–Ω—è, 3: –®—Ç—Ä–∞—Ñ, 4: –ü—Ä–µ–º—ñ—è)."
        )
        for user_id in self.players.keys():
            await context.bot.send_message(chat_id=user_id, text=start_message)


    def collect_actions(self, actions):
        if self.state == "ended":
            return 

        for user_id, action in actions.items():
            if user_id in self.players:
                self.players[user_id]["current_action"] = action



    def apply_penalty(self, player_data, score_1):
        player_data["score"] -= SCORE_PENALTY
        player_data["score"] -= score_1

    def apply_reward(self, player_data):
        player_data["score"] += SCORE_REWARD_CLEAN


    def all_actions_collected(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–∫–æ–Ω–∞–ª–∏ —Å–≤–æ—ó –¥—ñ—ó."""
        return all(player["current_action"] is not None for player in self.players.values())


# !!!!!!!!!!!
    async def process_turn(self, context, admin_chat_id):
        """
        –û–±—Ä–æ–±–ª—è—î —ñ–≥—Ä–æ–≤–∏–π —Ö—ñ–¥ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥—ñ–π –≥—Ä–∞–≤—Ü—ñ–≤.
        """
        if not self.all_actions_collected():
            await context.bot.send_message(chat_id=admin_chat_id, text="–ù–µ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–∫–æ–Ω–∞–ª–∏ —Å–≤–æ—ó –¥—ñ—ó.")
            return

        previous_quality = (self.lake.level, self.lake.position)
        has_penalty = any(player["current_action"] == "3" for player in self.players.values())  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —à—Ç—Ä–∞—Ñ

        # –û–Ω–æ–≤–ª—é—î–º–æ —è–∫—ñ—Å—Ç—å –≤–æ–¥–∏ –ø–µ—Ä–µ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º –æ—á–æ–∫
        for user_id, player_data in self.players.items():
            action = player_data["current_action"]

            if action == "1":  # –°–∫–∏–¥–∞–Ω–Ω—è
                self.lake.update_quality(ACTION_1_CLEAR_VAL)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞
            elif action == "2":  # –û—á–∏—â–µ–Ω–Ω—è
                self.lake.update_quality(ACTION_2_CLEAR_VAL)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞

        # –û–Ω–æ–≤–ª–µ–Ω—ñ –±–∞–ª–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –æ–∑–µ—Ä–∞
        score_1, score_2 = self.lake.get_current_scores()

        # –û–±—á–∏—Å–ª—é—î–º–æ –±–∞–ª–∏ –≥—Ä–∞–≤—Ü—ñ–≤
        for user_id, player_data in self.players.items():
            action = player_data["current_action"]
            earned_points = 0  # –û—á–∫–∏, –∑–∞—Ä–æ–±–ª–µ–Ω—ñ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥

            if action == "1":  # –°–∫–∏–¥–∞–Ω–Ω—è
                if has_penalty:
                    self.apply_penalty(player_data, score_1)
                    earned_points = -score_1 - SCORE_PENALTY
                else:
                    player_data["score"] += score_1
                    earned_points = score_1

            elif action == "2":  # –û—á–∏—â–µ–Ω–Ω—è
                player_data["score"] += score_2
                earned_points = score_2

            elif action == "3":  # –®—Ç—Ä–∞—Ñ
                for target_id, target_data in self.players.items():
                    if target_data["current_action"] == "1":  # –°–∫–∏–¥–∞–Ω–Ω—è
                        self.apply_penalty(target_data, score_1)
                player_data["score"] -= len(self.players)
                earned_points = -len(self.players)

            elif action == "4":  # –ü—Ä–µ–º—ñ—è
                for target_id, target_data in self.players.items():
                    if target_data["current_action"] == "2":  # –û—á–∏—â–µ–Ω–Ω—è
                        self.apply_reward(target_data)
                player_data["score"] -= len(self.players)
                earned_points = -len(self.players)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ä–æ–±–ª–µ–Ω—ñ –æ—á–∫–∏
            total_points = player_data["score"]
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üé≤ –í–∞—à —Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –∑–∞—Ä–æ–±–∏–ª–∏: {earned_points} –æ—á–æ–∫.\n"
                    f"üìä –í–∞—à—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –æ—á–∫–∏: {total_points}."
                )
            )

        flood_message = spring_flood(self.lake, self.turn)

        # –û—á–∏—â—É—î–º–æ –≤–∏–±—ñ—Ä –≥—Ä–∞–≤—Ü—ñ–≤
        for player_data in self.players.values():
            player_data["current_action"] = None

        self.turn += 1

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        if self.check_game_end():
            winners_message = self.get_winner()
            for user_id in self.players.keys():
                await context.bot.send_message(chat_id=user_id, text="üèÅ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                await context.bot.send_message(chat_id=user_id, text=winners_message)
            return

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞ –ø—ñ—Å–ª—è —Ö–æ–¥—É
        lake_status_message = self.get_lake_status(previous_quality, score_1, score_2)
        for user_id in self.players.keys():
            await context.bot.send_message(chat_id=user_id, text=lake_status_message)
            if flood_message:
                await context.bot.send_message(chat_id=user_id, text=flood_message)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥—É
        for user_id in self.players.keys():
            await prompt_action(context, user_id)


    def get_lake_status(self, previous_quality, score_1, score_2):
        """
        –§–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω –æ–∑–µ—Ä–∞ –ø—ñ—Å–ª—è —Ö–æ–¥—É.
        """
        previous_level, previous_position = previous_quality
        current_level, current_position = self.lake.level, self.lake.position

        water_status = (
            "–ß–∏—Å—Ç–∞ –≤–æ–¥–∞" if current_level >= 4 else
            "–ü—Ä–æ–º–∏—Å–ª–æ–≤–∞ —á–∏—Å—Ç–∞ –≤–æ–¥–∞" if -3 <= current_level <= 3 else
            "–ë—Ä—É–¥–Ω–∞ –≤–æ–¥–∞"
        )

        result = (
            f"üåä –°—Ç–∞–Ω –æ–∑–µ—Ä–∞: {water_status}\n"
            f"üîÑ –ó–º—ñ–Ω–∞ —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏: –†—ñ–≤–µ–Ω—å {previous_level} -> {current_level}, "
            f"–ü–æ–∑–∏—Ü—ñ—è {previous_position} -> {current_position}\n"
            f"üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥: {self.turn}/{GAME_DURATION_MONTHS}\n"
            f"üìä –ë–∞–ª–∏ –∑–∞ —Ä—ñ—à–µ–Ω–Ω—è:\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ1 (—Å–∫–∏–¥–∞–Ω–Ω—è): {score_1}\n"
            f"   - –†—ñ—à–µ–Ω–Ω—è ‚Ññ2 (–æ—á–∏—â–µ–Ω–Ω—è): {score_2}\n"
        )
        return result

    
    def calculate_action_scores(self):
        """–û–±—á–∏—Å–ª—é—î –±–∞–ª–∏ –¥–ª—è –¥—ñ–π ‚Ññ1 —Ç–∞ ‚Ññ2 –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É –æ–∑–µ—Ä–∞."""
        current_quality = self.lake.water_quality
        row_index = max(-8, min(current_quality, 6)) + 8  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —ñ–Ω–¥–µ–∫—Å –≤—ñ–¥ 0 –¥–æ 14
        score_1 = self.decision_1_scores[row_index]
        score_2 = self.decision_2_scores[row_index]
        return score_1, score_2


    def check_game_end(self):
        if self.turn >= GAME_DURATION_MONTHS:
            self.state = "ended"
            return True
        return False

    def get_winner(self):
        if self.state != "ended":
            return "–ì—Ä–∞ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        sorted_players = sorted(
            self.players.items(),
            key=lambda item: item[1]["score"],
            reverse=True
        )

        table = "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∏:\n"
        table += "{:<4} {:<20} {:<10}\n".format("–ú—ñ—Å—Ü–µ", "–ì—Ä–∞–≤–µ—Ü—å", "–û—á–∫–∏")
        table += "-" * 40 + "\n"

        for rank, (user_id, player_data) in enumerate(sorted_players, start=1):
            table += "{:<4} {:<20} {:<10}\n".format(
                rank,
                player_data["name"],
                player_data["score"]
            )

        return table
    

    def start_meeting(self):
        """–ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ä–∞–¥–∏ –º—ñ–∂ –≥—Ä–∞–≤—Ü—è–º–∏."""
        self.is_meeting_active = True

    def end_meeting(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ä–∞–¥–∏ –º—ñ–∂ –≥—Ä–∞–≤—Ü—è–º–∏."""
        self.is_meeting_active = False

    async def end_meeting_job(self, context):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ä–∞–¥–∏."""
        self.end_meeting()
        for user_id in self.players.keys():
            await context.bot.send_message(chat_id=user_id, text="‚è≥ –ù–∞—Ä–∞–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


    def add_player(self, user_id, name):
        if len(self.players) < self.max_players and user_id not in self.players:
            self.players[user_id] = {"name": name, "score": 0, "current_action": None}
            return True, len(self.players)  # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤
        return False, len(self.players)
            